/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.VitalSign;

/**
 *
 * @author tarunbalwani
 */
public class viewPatientDirectory extends javax.swing.JPanel {

    /**
     * Creates new form viewPatientDirectory
     */
    PatientDirectory patientDirectory;
    EncounterHistory encounterHistory;
    EncounterHistory abnormalEncounters;
    PatientDirectory abnormalPatients;
    public viewPatientDirectory(PatientDirectory patientDirectory, EncounterHistory encounterHistory,PatientDirectory abnormalPatients, EncounterHistory abnormalEncounters) {
        initComponents();
        this.patientDirectory = patientDirectory;
        this.encounterHistory = encounterHistory;
        this.abnormalEncounters = abnormalEncounters;
        this.abnormalPatients = abnormalPatients;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDirectory = new javax.swing.JTable();
        lblSysPressure = new javax.swing.JLabel();
        lblDiasPressure = new javax.swing.JLabel();
        txtSysPressure = new javax.swing.JTextField();
        txtDiasPressure = new javax.swing.JTextField();
        lblPatientID = new javax.swing.JLabel();
        lblTxtPatID = new javax.swing.JLabel();
        btnSaveDetails = new javax.swing.JButton();
        btnAddVitals = new javax.swing.JButton();
        btnViewHistory = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatientHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblEncHisPatId = new javax.swing.JLabel();
        lblSysError = new javax.swing.JLabel();
        lblDiasError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        tblPatientDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "First Name", "Last Name", "Age", "City", "Community", "House"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientDirectory);

        lblSysPressure.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblSysPressure.setText("Systolic Pressure");

        lblDiasPressure.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblDiasPressure.setText("Diastolic Pressure");

        txtSysPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSysPressureKeyReleased(evt);
            }
        });

        txtDiasPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiasPressureKeyReleased(evt);
            }
        });

        lblPatientID.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblPatientID.setText("Patient ID");

        lblTxtPatID.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        lblTxtPatID.setForeground(new java.awt.Color(102, 102, 0));

        btnSaveDetails.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnSaveDetails.setText("Save Details");
        btnSaveDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDetailsActionPerformed(evt);
            }
        });

        btnAddVitals.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnAddVitals.setText("Add Vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        btnViewHistory.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnViewHistory.setText("View History");
        btnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHistoryActionPerformed(evt);
            }
        });

        tblPatientHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter No", "Systolic", "Diastolic"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPatientHistory);

        jLabel1.setText("Patient ID");

        lblSysError.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        lblSysError.setForeground(new java.awt.Color(102, 102, 0));

        lblDiasError.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        lblDiasError.setForeground(new java.awt.Color(102, 102, 0));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PATIENT DIRECTORY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewHistory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddVitals))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lblSysPressure)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPatientID)
                                            .addGap(12, 12, 12)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTxtPatID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtSysPressure, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblDiasPressure)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtDiasPressure))
                                .addComponent(btnSaveDetails)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(lblSysError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblDiasError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(86, 86, 86)
                                    .addComponent(lblEncHisPatId, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDiasPressure, lblPatientID, lblSysPressure});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVitals)
                    .addComponent(btnViewHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientID)
                            .addComponent(lblTxtPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSysPressure)
                            .addComponent(txtSysPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(lblEncHisPatId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSysError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDiasPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiasPressure))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDiasError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveDetails)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        
        lblTxtPatID.setText(Integer.toString(patient.getPatientId()));
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void btnSaveDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDetailsActionPerformed
        // TODO add your handling code here:
         if(txtDiasPressure.getText().isBlank()|| txtDiasPressure.getText().isEmpty() 
                || txtSysPressure.getText().isBlank() || txtSysPressure.getText().isEmpty()){
              JOptionPane.showMessageDialog(this, "Vital Signs Cannot be Blank");
        
        
        }
        else{
        boolean patientYN;
        boolean isNormal;
        int encNo = 0;
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        patientYN = isPatientPresent(patient.getPatientId());
        System.out.println(patientYN);
        VitalSign vitalSign = new VitalSign();
        Encounter encounter = new Encounter();
        vitalSign.setBpDiastolic(Double.parseDouble(txtDiasPressure.getText()));
        vitalSign.setBpSystolic(Double.parseDouble(txtSysPressure.getText()));
        
        if(patientYN){
        encNo =  getEncNo(patient.getPatientId());
            encounter.setEncounterNo(encNo+1);
        }else{
            encounter.setEncounterNo(1);
        }
        
        encounter.setEncPatientId(patient.getPatientId());
        encounter.addVitalSign(vitalSign);
        encounterHistory.addEncounterInList(encounter);
        
        isNormal = isNormal(patient.getPatAge(), vitalSign.getBpSystolic(),vitalSign.getBpDiastolic());
        
        if (!isNormal){
            abnormalPatients.addNewPatient(patient);
            abnormalEncounters.addEncounterInList(encounter);
        
        }
        System.out.println(encounterHistory.getEncounterHistoryList().get(0));
         JOptionPane.showMessageDialog(this, "Vitals Added!");
         txtDiasPressure.setText("");
         txtSysPressure.setText("");
         lblTxtPatID.setText("");
       }
    }//GEN-LAST:event_btnSaveDetailsActionPerformed

    private void btnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHistoryActionPerformed
        // TODO add your handling code here:
        
       
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        lblEncHisPatId.setText(Integer.toString(patient.getPatientId()));
        DefaultTableModel tblPatientHistoryModel = (DefaultTableModel) tblPatientHistory.getModel();
        tblPatientHistoryModel.setRowCount(0);
        //get filtered data
        ArrayList<Encounter> list = getFilteredData(patient.getPatientId());
        
        //eoc
        //for(Encounter encounter : encounterHistory.getEncounterHistoryList()){
        for(Encounter encounter : list){    
            Object[] row = new Object[3];
            row[0] = encounter.getEncounterNo();
            VitalSign vitalSign = encounter.getVitalSignList().get(0);
            row[1] = vitalSign.getBpSystolic();
            row[2] = vitalSign.getBpDiastolic();
            tblPatientHistoryModel.addRow(row);
        }
        
        
    }//GEN-LAST:event_btnViewHistoryActionPerformed

    private void txtSysPressureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSysPressureKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{2,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtSysPressure.getText());
        if(!match.matches()){
            lblSysError.setText("Systolic Pressure Should be 2 to 3 digits");
        }else{
            lblSysError.setText("");
        }
    }//GEN-LAST:event_txtSysPressureKeyReleased

    private void txtDiasPressureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiasPressureKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{2}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtDiasPressure.getText());
        if(!match.matches()){
            lblDiasError.setText("Diastolic Pressure Should be 2 digits");
        }else{
            lblDiasError.setText("");
        }
    }//GEN-LAST:event_txtDiasPressureKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnSaveDetails;
    private javax.swing.JButton btnViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDiasError;
    private javax.swing.JLabel lblDiasPressure;
    private javax.swing.JLabel lblEncHisPatId;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblSysError;
    private javax.swing.JLabel lblSysPressure;
    private javax.swing.JLabel lblTxtPatID;
    private javax.swing.JTable tblPatientDirectory;
    private javax.swing.JTable tblPatientHistory;
    private javax.swing.JTextField txtDiasPressure;
    private javax.swing.JTextField txtSysPressure;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        model.setRowCount(0);
        for (Patient patient: patientDirectory.getPatientList()){
        Object[] row = new Object[7];
        row[0] = patient;
        row[1] = patient.getPatFname();
        row[2] = patient.getPatLame();
        row[3] = patient.getPatAge();
        row[4] = patient.getPatCity();
        row[5] = patient.getPatCommunity();
        row[6] = patient.getPatHouse();
        model.addRow(row);
    }
}

    private boolean isPatientPresent(int patientId) {
        boolean present = false;
        for(Encounter encounter : encounterHistory.getEncounterHistoryList()){
        if(encounter.getEncPatientId() == patientId){
            present = true;
        }
        else{
            present = false;
        }
        }
       return present;
    }

    private int getEncNo(int patientId) {
        var result = new ArrayList<Encounter>();
        for(Encounter enc : encounterHistory.getEncounterHistoryList()){
        if(enc.getEncPatientId() == patientId){
        result.add(enc);
            }
        }
        
        Encounter enc = result.get(result.size()-1);
        return enc.getEncounterNo();
            
    }

    private ArrayList<Encounter> getFilteredData(int patientId) {
        var result = new ArrayList<Encounter>();
        for(Encounter enc : encounterHistory.getEncounterHistoryList()){
        if(enc.getEncPatientId() == patientId){
        result.add(enc);
            }
        }
        return result;
        
    }

    private boolean isNormal(int patAge, double bpSystolic, double bpDiastolic) {
        boolean isNorm = false;
        if(patAge <= 40){
            if((bpSystolic<= 135 && bpSystolic>=95) && (bpDiastolic <= 80 && bpDiastolic>=60)){
            isNorm = true;
            }
            else{
            isNorm = false;
            }
            
        }
        else if (patAge >= 41 && patAge <= 100){
            if((bpSystolic<= 145 && bpSystolic>=110) && (bpDiastolic <= 90 && bpDiastolic>=70)){
            isNorm=  true;
            }
            else{
            isNorm = false;
            }
        }
        return isNorm;
        
    }
}
