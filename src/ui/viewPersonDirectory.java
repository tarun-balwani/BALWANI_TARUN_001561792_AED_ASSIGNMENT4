/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author tarunbalwani
 */
public class viewPersonDirectory extends javax.swing.JPanel {

    /**
     * Creates new form viewPersonDirectory
     */
    PersonDirectory viPersonDirectory;
    PatientDirectory patientDirectory;
    EncounterHistory encounterHistory;
    public viewPersonDirectory(PersonDirectory personDirectory, PatientDirectory patientDirectory, EncounterHistory encounterHistory) {
        initComponents();
        System.out.println("inside right component");
        this.viPersonDirectory = personDirectory;
        this.patientDirectory = patientDirectory;
        this.encounterHistory = encounterHistory;
        populateTable();
        comboCommunity.addItem("BRIGHTON");
        comboCommunity.addItem("ROXBURY");
        comboCommunity.setSelectedItem("");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLname = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblHouse = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtHouse = new javax.swing.JTextField();
        btnAddPerson = new javax.swing.JButton();
        txtFname = new javax.swing.JTextField();
        lblFname = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewPersonTable = new javax.swing.JTable();
        btnBookAppointment = new javax.swing.JButton();
        comboCommunity = new javax.swing.JComboBox<>();
        btnEdit = new javax.swing.JButton();
        btnSaveEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabelFname = new javax.swing.JLabel();
        jLabelLname = new javax.swing.JLabel();
        jLabelAge = new javax.swing.JLabel();
        jLabelHouse = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        lblLname.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblLname.setText("Last Name");

        lblAge.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAge.setText("Age");

        lblCommunity.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCommunity.setText("Community");

        lblCity.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCity.setText("City");

        lblHouse.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblHouse.setText("House No");

        txtLname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLnameKeyReleased(evt);
            }
        });

        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAgeKeyReleased(evt);
            }
        });

        txtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCityFocusGained(evt);
            }
        });
        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });
        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCityKeyReleased(evt);
            }
        });

        txtHouse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHouseKeyReleased(evt);
            }
        });

        btnAddPerson.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnAddPerson.setText("Add Person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        txtFname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFnameKeyReleased(evt);
            }
        });

        lblFname.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblFname.setText("First Name");

        viewPersonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "City", "Community", "House"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewPersonTable);

        btnBookAppointment.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnBookAppointment.setText("Book Appointment");
        btnBookAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAppointmentActionPerformed(evt);
            }
        });

        comboCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {""}));
        comboCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCommunityActionPerformed(evt);
            }
        });
        comboCommunity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                comboCommunityKeyReleased(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSaveEdit.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnSaveEdit.setText("Save Edits");
        btnSaveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEditActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabelFname.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabelFname.setForeground(new java.awt.Color(102, 102, 0));

        jLabelLname.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabelLname.setForeground(new java.awt.Color(102, 102, 0));

        jLabelAge.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabelAge.setForeground(new java.awt.Color(102, 102, 0));

        jLabelHouse.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabelHouse.setForeground(new java.awt.Color(102, 102, 0));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PERSON DIRECTORY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAge)
                                    .addComponent(lblCommunity)
                                    .addComponent(lblCity)
                                    .addComponent(lblHouse)
                                    .addComponent(lblLname))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(comboCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAge, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLname, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtHouse)
                                    .addComponent(jLabelLname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabelHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnBookAppointment))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(btnAddPerson)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveEdit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFname)
                                .addGap(9, 9, 9)
                                .addComponent(jLabelFname, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(0, 132, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(jLabelAge, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAge, lblCity, lblCommunity, lblHouse, lblLname});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddPerson, btnSaveEdit});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnEdit});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFname)
                    .addComponent(btnBookAppointment)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete))
                .addGap(1, 1, 1)
                .addComponent(jLabelFname, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLname))
                .addGap(2, 2, 2)
                .addComponent(jLabelLname, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAge))
                .addGap(3, 3, 3)
                .addComponent(jLabelAge, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommunity)
                    .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouse)
                    .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPerson)
                    .addComponent(btnSaveEdit))
                .addGap(98, 98, 98))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        // TODO add your handling code here:
        
        if(txtAge.getText().isBlank() || txtAge.getText().isEmpty()
          ||txtCity.getText().isBlank() || txtCity.getText().isEmpty()
          ||txtFname.getText().isBlank() || txtFname.getText().isEmpty()
          ||txtLname.getText().isBlank() || txtLname.getText().isEmpty()
          ||txtHouse.getText().isBlank() || txtHouse.getText().isEmpty()
         // || comboCommunity.getSelectedItem().toString().isBlank() || comboCommunity.getSelectedItem().toString().isEmpty()
                ){
            JOptionPane.showMessageDialog(this, "Fields cannot be blank ");
            
        }
        else{
        Person person = new Person();
        person.setAge(Integer.parseInt(txtAge.getText()));
        person.setCityName(txtCity.getText());
        //person.setCommunityName(txtCommunity.getText());
        person.setCommunityName(comboCommunity.getSelectedItem().toString());
        person.setHouseNo(Integer.parseInt(txtHouse.getText()));
        person.setfName(txtFname.getText());
        person.setlName(txtLname.getText());
       this.viPersonDirectory.addNewPerson(person);
       System.out.println(viPersonDirectory.getPersonList().get(0).toString());
       populateTable();
       JOptionPane.showMessageDialog(this, "Person Details Added Successfully");
       txtAge.setText("");
       txtFname.setText("");
       txtLname.setText("");
       txtCity.setText("");
       txtHouse.setText("");
       comboCommunity.setSelectedItem("");
       
        }
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnBookAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAppointmentActionPerformed
        // TODO add your handling code here:
        boolean patientYN = false;
        int selectedRowIndex = viewPersonTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Person person = (Person) model.getValueAt(selectedRowIndex , 0);
        System.out.println(person.getfName() + person.getlName());
        patientYN = ifPatientExist(person.getfName(), person.getlName());
        
        if(!patientYN){
        Patient patient = new Patient();
        patient.setPatFname(person.getfName());
        patient.setPatLame(person.getlName());
        patient.setPatAge(person.getAge());
        patient.setPatCity(person.getCityName());
        patient.setPatCommunity(person.getCommunityName());
        patient.setPatHouse(person.getHouseNo());
        patient.setPatientId(getUniqueId());
        patientDirectory.addNewPatient(patient);
        System.out.println(patient.getPatientId());
        JOptionPane.showMessageDialog(this, "Appointment Confirmed");
        }
        else{
            JOptionPane.showMessageDialog(this, "Appointment Confirmed");
        }
        
        
        
    }//GEN-LAST:event_btnBookAppointmentActionPerformed

    private void comboCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCommunityActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_comboCommunityActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = viewPersonTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Person person = (Person) model.getValueAt(selectedRowIndex , 0);
        txtAge.setText(String.valueOf(person.getAge()));
        txtCity.setText(person.getCityName());
        txtFname.setText(person.getfName());
        txtLname.setText(person.getlName());
        txtHouse.setText(String.valueOf(person.getHouseNo()));
        comboCommunity.setSelectedItem(person.getCommunityName());
        btnAddPerson.setEnabled(false);
        //txtCity.setEditable(false);
        
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEditActionPerformed
        // TODO add your handling code here:
        if(txtAge.getText().isBlank() || txtAge.getText().isEmpty()
          ||txtCity.getText().isBlank() || txtCity.getText().isEmpty()
          ||txtFname.getText().isBlank() || txtFname.getText().isEmpty()
          ||txtLname.getText().isBlank() || txtLname.getText().isEmpty()
          ||txtHouse.getText().isBlank() || txtHouse.getText().isEmpty()
         // || comboCommunity.getSelectedItem().toString().isBlank() || comboCommunity.getSelectedItem().toString().isEmpty()
                ){
            JOptionPane.showMessageDialog(this, "Fields cannot be blank ");
            
        }
        else{
        
        int selectedRowIndex = viewPersonTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Person person = (Person) model.getValueAt(selectedRowIndex , 0);
        person.setAge(Integer.parseInt(txtAge.getText()));
        person.setfName(txtFname.getText());
        person.setlName(txtLname.getText());
        person.setCityName(txtCity.getText());
        person.setHouseNo(Integer.parseInt(txtHouse.getText()));
        person.setCommunityName(comboCommunity.getSelectedItem().toString());
        populateTable();
        JOptionPane.showMessageDialog(this, "Record Updated Successfully!");
        txtAge.setText("");
       txtFname.setText("");
       txtLname.setText("");
       txtCity.setText("");
       txtHouse.setText("");
       comboCommunity.setSelectedItem("");
       btnAddPerson.setEnabled(true);
        
        }
        
    }//GEN-LAST:event_btnSaveEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = viewPersonTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Person person = (Person) model.getValueAt(selectedRowIndex , 0);
        viPersonDirectory.getPersonList().remove(selectedRowIndex);
        populateTable();
        JOptionPane.showMessageDialog(this, "Record Delected Successfully!");
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtFnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFnameKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[a-zA-Z]{0,30}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtFname.getText());
        if(!match.matches()){
            jLabelFname.setText("Only Characters are allowed");
        }else{
            jLabelFname.setText("");
        }
    }//GEN-LAST:event_txtFnameKeyReleased

    private void txtLnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLnameKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,30}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtLname.getText());
        if(!match.matches()){
            jLabelLname.setText("Only Characters are allowed");
        }else{
            jLabelLname.setText("");
        }
    }//GEN-LAST:event_txtLnameKeyReleased

    private void txtCityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityKeyReleased

    private void comboCommunityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboCommunityKeyReleased
        // TODO add your handling code here:
        //String PATTERN = "^[0-9]{3}";
        
    }//GEN-LAST:event_comboCommunityKeyReleased

    private void txtHouseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHouseKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{0,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtHouse.getText());
        if(!match.matches()){
            jLabelHouse.setText("Only Numbers are allowed");
        }else{
            jLabelHouse.setText("");
        }
    }//GEN-LAST:event_txtHouseKeyReleased

    private void txtAgeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{0,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtAge.getText());
        if(!match.matches()){
            jLabelAge.setText("Only Numbers are allowed");
        }else{
            jLabelAge.setText("");
        }
    }//GEN-LAST:event_txtAgeKeyReleased

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
        txtCity.setText("BOSTON");
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtCityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusGained
        // TODO add your handling code here:
        txtCity.setText("BOSTON");
    }//GEN-LAST:event_txtCityFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnBookAppointment;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSaveEdit;
    private javax.swing.JComboBox<String> comboCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAge;
    private javax.swing.JLabel jLabelFname;
    private javax.swing.JLabel jLabelHouse;
    private javax.swing.JLabel jLabelLname;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblFname;
    private javax.swing.JLabel lblHouse;
    private javax.swing.JLabel lblLname;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTable viewPersonTable;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        model.setRowCount(0);
        for (Person person: viPersonDirectory.getPersonList()){
        Object[] row = new Object[6];
        row[0] = person;
        row[1] = person.getlName();
        row[2] = person.getAge();
        row[3] = person.getCityName();
        row[4] = person.getCommunityName();
        row[5] = person.getHouseNo();
        model.addRow(row);
    }
}

    private int getUniqueId() {
        
        int randomPIN = (int)(Math.random()*9000)+1000;
        for(Patient patient : patientDirectory.getPatientList()){
            if(patient.getPatientId() == randomPIN){
            getUniqueId();
            }
        }
        return randomPIN;
    }

    private boolean ifPatientExist(String fName, String lName) {
        boolean exists = false;
        for(Patient patient : patientDirectory.getPatientList()){
        if(patient.getPatFname().equals(fName) && (patient.getPatLame()).equals(lName)){
            exists = true;
        }
        }
        return exists;
    }
    
}

